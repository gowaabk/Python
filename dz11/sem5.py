# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫.
# üìå –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
# —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä
# –∏ –ø–ª–æ—â–∞–¥—å.
# üìå –ï—Å–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞
# —Å—Ç–æ—Ä–æ–Ω–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É –Ω–∞—Å –∫–≤–∞–¥—Ä–∞—Ç.


# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
# –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
# üìå –°–∫–ª–∞–¥—ã–≤–∞–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä—ã, –∞ –Ω–µ –¥–ª–∏–Ω–Ω—É –∏ —à–∏—Ä–∏–Ω—É.
# üìå –ü—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

class Rectangle:
    """–ö–ª–∞—Å—Å –ø—Ä—è–ø–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –º–µ—Ç–æ–¥–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏, –ø–µ—Ä–∏–º–µ—Ç—Ä–∞, —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–ª—å–Ω–∏–æ–∫–≤"""

    def __init__(self, side1: int, side2: int = None):
        """–ú–ï—Ç–æ–¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω –ø—Ä—è–º–æ—É–≥–ª–æ—å–Ω–∏–∫–∞"""
        self.side1 = side1
        self.side2 = side2 if side2 is not None else side1

    def area(self) -> int:
        """–ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        return self.side1 * self.side2

    def perimetr(self):
        """–ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        return 2*(self.side1 + self.side2)

    def __add__(self, other):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤"""
        new_perimetr = self.perimetr() + other.perimetr()
        new_side1 = self.side1
        new_side2 = new_perimetr / 2 - new_side1
        return Rectangle(new_side1, new_side2)

    def __sub__(self, other):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤"""
        new_perimetr = abs(self.perimetr() - other.perimetr())
        new_side1 = min([self.side1, self.side2, other.side1, other.side2])
        new_side2 = new_perimetr / 2 - new_side1
        return Rectangle(new_side1, new_side2)


if __name__ == '__main__':
    rect1 = Rectangle(2, 5)
    rect2 = Rectangle(5, 10)
    print(f'{rect1.area()=} {rect1.perimetr()=}')
    print(f'{rect2.area()=} {rect2.perimetr()=}')

    rec_sum = rect1 + rect2
    print(rec_sum.side1, rec_sum.side2)
    rec_sub = rect1 - rect2
    print(rec_sub.side1, rec_sub.side2)
